# Updated: 08/Jun/2011

OvenVPN XMPP Gateway  (sort of openvpn over jabber(XMPP) tunnel)

* Goal:
  To allow tunnelling openvpn through "normal" (ie. <message>) jabber streams, thus
  avoid requiring public PoP presence for both endpoints.

* Requirements
  - OpenVPN knowhow
  - python 2.3+: I've used 2.5
  - xmpppy: I've used packaged xmpppy provided by my distro:
      $ sudo apt-get install python-jabberbot

    Else download from:
      http://sourceforge.net/projects/xmpppy/files/xmpppy/

    As python module "xmpp" must be found by python, the easiest way
    would be:
       cd /path/to/oxgate
       tar zxvf /path/to/download/xmpppy-0.x.y.tar.gz
       ln -s xmpppy-0.x.y/xmpp .
     
* Installation
  None yet, run the script from the directory itself, eg:
     ./main.py <conf_file>

  To create a conf_file, do run "./main.py" alone, it will output a
  conf_file example:
     host1$ ./main.py > oxg.v1.conf      host2$ ./main.py > oxg.v2.conf
     host1$ vim oxg.v1.conf              host2$ vim oxg.v2.conf

  Else use provided oxg.v?.conf.example files


* Usage examples
  1) You want to jabbertunnel UDP/1194 between A <-> B, ie:

     UDP/1194<-->[ A ]<=======jabber=========>[ B ]<-->UDP/1194
                   |                            |
        user@jabber.org/vpnA            user@jabber.org/vpnB

     You must run:
       user@A$ ./main.py oxg.AtoB.conf &
       root@A# openvpn --remote localhost --rport 1194 --lport 4999 ... 
  
       user@B$ ./main.py oxg.BtoA.conf &
       root@B# openvpn --remote localhost --rport 1194 --lport 4999 ...

     Actually lport must be anything except rport because it's already bound by
     this gateway.
